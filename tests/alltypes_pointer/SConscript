# Encode the AllTypes message using pointers for all fields, and verify the
# output against the normal AllTypes test case.

Import("env")

# We need our own pb_decode.o for the malloc support
env = env.Clone()
env.Append(CPPDEFINES = {'PB_ENABLE_MALLOC': 1});

# Disable libmudflap, because it will confuse e.g. valgrind
# and other memory leak detection tools.
if '-fmudflap' in env["CCFLAGS"]:
    env["CCFLAGS"].remove("-fmudflap")
    env["LINKFLAGS"].remove("-fmudflap")
    env["LIBS"].remove("mudflap")

strict = env.Clone()
strict.Append(CFLAGS = strict['CORECFLAGS'])
strict.Object("pb_decode_with_malloc.o", "$NANOPB/pb_decode.c")
strict.Object("pb_encode_with_malloc.o", "$NANOPB/pb_encode.c")

c = Copy("$TARGET", "$SOURCE")
env.Command("alltypes.proto", "#alltypes/alltypes.proto", c)

env.NanopbProto(["alltypes", "alltypes.options"])
enc = env.Program(["encode_alltypes_pointer.c", "alltypes.pb.c", "pb_encode_with_malloc.o"])
dec = env.Program(["decode_alltypes_pointer.c", "alltypes.pb.c", "pb_decode_with_malloc.o"])

refdec = "$BUILD/alltypes/decode_alltypes$PROGSUFFIX"

# Encode and compare results
env.RunTest(enc)
env.Compare(["encode_alltypes_pointer.output", "$BUILD/alltypes/encode_alltypes.output"])

# Decode
env.RunTest("decode_alltypes.output", [dec, "encode_alltypes_pointer.output"])
env.RunTest("decode_alltypes_ref.output", [refdec, "encode_alltypes_pointer.output"])

# Do the same thing with the optional fields present
env.RunTest("optionals.output", enc, ARGS = ['1'])
env.RunTest("optionals.decout", [refdec, "optionals.output"], ARGS = ['1'])
env.Compare(["optionals.output", "$BUILD/alltypes/optionals.output"])

